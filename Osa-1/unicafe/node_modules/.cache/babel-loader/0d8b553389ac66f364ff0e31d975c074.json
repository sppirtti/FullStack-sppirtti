{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samuli\\\\FullStack\\\\Osa-1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const all = good + bad + neutral;\n  const average = (good + bad * -1) / all || 0;\n  const positive = good / all * 100 || 0;\n\n  const handlegoodClick = () => setGood(good + 1);\n\n  const handleneutralClick = () => setNeutral(neutral + 1);\n\n  const handlebadClick = () => setBad(bad + 1);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handlegoodClick,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleneutralClick,\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handlebadClick,\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \" Statistics \"), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    average: average,\n    positive: positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: onClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }\n}, text);\n\nconst Statistics = props => {\n  if (props.all === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"No feedback given\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"good\",\n    value: props.clicks.good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"neutral\",\n    value: props.clicks.neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"bad\",\n    value: props.clicks.bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"all\",\n    value: props.all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"average\",\n    value: props.average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StatisticLine, {\n    text: \"positive\",\n    value: props.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst StatisticLine = ({\n  text,\n  value\n}) => {\n  if (text === \"positive\") {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, text, \" \"), \" \", /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 26\n      }\n    }, value, \" \"), \" %\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, text, \" \"), \" \", /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 24\n    }\n  }, value, \" \"));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Samuli/FullStack/Osa-1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","App","good","setGood","neutral","setNeutral","bad","setBad","all","average","positive","handlegoodClick","handleneutralClick","handlebadClick","Button","onClick","text","Statistics","props","clicks","StatisticLine","value","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,CAAD,CAA9B;AAGA,QAAMS,GAAG,GAAGN,IAAI,GAAGI,GAAP,GAAaF,OAAzB;AAEA,QAAMK,OAAO,GAAG,CAACP,IAAI,GAAII,GAAG,GAAI,CAAC,CAAjB,IAAwBE,GAAxB,IAA+B,CAA/C;AAEA,QAAME,QAAQ,GAAGR,IAAI,GAAGM,GAAP,GAAa,GAAb,IAAoB,CAArC;;AAIA,QAAMG,eAAe,GAAG,MACtBR,OAAO,CAACD,IAAI,GAAG,CAAR,CADT;;AAGA,QAAMU,kBAAkB,GAAG,MACzBP,UAAU,CAACD,OAAO,GAAG,CAAX,CADZ;;AAGA,QAAMS,cAAc,GAAG,MACrBN,MAAM,CAACD,GAAG,GAAG,CAAP,CADR;;AAGA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK,eAAjB;AAAkC,IAAA,IAAI,EAAC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEC,kBAAjB;AAAqC,IAAA,IAAI,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEC,cAAjB;AAAiC,IAAA,IAAI,EAAC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,eAUE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEX,IAAlB;AAAwB,IAAA,GAAG,EAAEI,GAA7B;AAAkC,IAAA,OAAO,EAAEF,OAA3C;AACE,IAAA,OAAO,EAAEK,OADX;AACoB,IAAA,QAAQ,EAAEC,QAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAeD,CAvCD;;AAyCA,MAAMI,MAAM,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,kBACb;AAAQ,EAAA,OAAO,EAAED,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGC,IADH,CADF;;AAOA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,MAAIA,KAAK,CAACV,GAAN,KAAc,CAAlB,EAAqB;AACnB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF;AAKD;;AACD,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,KAAK,EAAEU,KAAK,CAACC,MAAN,CAAajB,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,SAApB;AAA8B,IAAA,KAAK,EAAEgB,KAAK,CAACC,MAAN,CAAaf,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,KAApB;AAA0B,IAAA,KAAK,EAAEc,KAAK,CAACC,MAAN,CAAab,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,KAApB;AAA0B,IAAA,KAAK,EAAEY,KAAK,CAACV,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,SAApB;AAA8B,IAAA,KAAK,EAAEU,KAAK,CAACT,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,UAApB;AAA+B,IAAA,KAAK,EAAES,KAAK,CAACR,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAJ,CAPF,CAFF;AAsBD,CA9BD;;AAgCA,MAAMU,aAAa,GAAG,CAAC;AAAEJ,EAAAA,IAAF;AAAQK,EAAAA;AAAR,CAAD,KAAqB;AAEzC,MAAIL,IAAI,KAAK,UAAb,EAAyB;AACvB,wBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAL,MADF,oBACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKK,KAAL,MADnB,OADF;AAKD;;AACD,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAL,MADF,oBACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKK,KAAL,MADnB,CADF;AAKD,CAdD;;AAkBArB,QAAQ,CAACsB,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n\n  const all = good + bad + neutral\n\n  const average = (good + (bad * (-1))) / all || 0\n\n  const positive = good / all * 100 || 0\n\n\n\n  const handlegoodClick = () =>\n    setGood(good + 1)\n\n  const handleneutralClick = () =>\n    setNeutral(neutral + 1)\n\n  const handlebadClick = () =>\n    setBad(bad + 1)\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <div>\n        <Button onClick={handlegoodClick} text=\"good\" />\n        <Button onClick={handleneutralClick} text=\"neutral\" />\n        <Button onClick={handlebadClick} text=\"bad\" />\n\n      </div>\n      <h1> Statistics </h1>\n\n      <Statistics good={good} bad={bad} neutral={neutral}\n        average={average} positive={positive} />\n    </div>\n  )\n}\n\nconst Button = ({ onClick, text }) => (\n  <button onClick={onClick}>\n    {text}\n  </button>\n)\n\n\nconst Statistics = (props) => {\n  if (props.all === 0) {\n    return (\n      <div>\n        No feedback given\n      </div>\n    )\n  }\n  return (\n\n    <table>\n\n      <tr><StatisticLine text=\"good\" value={props.clicks.good} /></tr>\n      <tr><StatisticLine text=\"neutral\" value={props.clicks.neutral} /></tr>\n      <tr><StatisticLine text=\"bad\" value={props.clicks.bad} /></tr>\n      <tr><StatisticLine text=\"all\" value={props.all} /></tr>\n      <tr><StatisticLine text=\"average\" value={props.average} /></tr>\n      <tr><StatisticLine text=\"positive\" value={props.positive} /></tr>\n\n\n\n\n\n    </table>\n\n\n\n\n  )\n\n}\n\nconst StatisticLine = ({ text, value }) => {\n\n  if (text === \"positive\") {\n    return (\n      <>\n        <td>{text} </td> <td>{value} </td> %\n      </>\n    )\n  }\n  return (\n    <>\n      <td>{text} </td> <td>{value} </td>\n    </>\n  )\n}\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}